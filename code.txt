package project1;
 
import java.io.IOException;
import java.time.Duration;
import java.util.List;

//import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
 


import io.github.bonigarcia.wdm.WebDriverManager;
 
public class snapdeal {
	public static void main(String[] args) throws IOException, InterruptedException {
		//WebDriverManager.chromedriver().setup();
		
		WebDriver driver = DriverSetup.WebDriverSetup();
		
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.get("https://www.snapdeal.com/");
		driver.manage().window().maximize();
		driver.findElement(By.id("inputValEnter")).sendKeys("Bluetooth headphone");
		driver.findElement(By.cssSelector("button.searchformButton")).click();
		
		
	WebElement sc=	driver.findElement(By.xpath("//div[@class='logoWidth lfloat col-xs-3 reset-padding']"));
	Screenshot.ScreenshotElement(sc);
		
		//dropdown
		driver.findElement(By.xpath("//i[@class=\"sd-icon sd-icon-expand-arrow sort-arrow\"]")).click();
		List<WebElement> options=driver.findElements(By.xpath("//li[@class='search-li'][@data-index=\"1\"]//span"));
		//WebElement  a=driver.findElement(By.xpath(""));
		
		for(WebElement option:options)
		{
			System.out.println(option.getText());
			if(option.getText().equals("Popularity"))
			{
				option.click();
				break;
			}
		}
	/*	String aa= "Popularity";
		if(a.getText().equals(aa)) {
			a.click();
		}
		*/

		/*minimum slider 
		Actions act=new Actions(driver);
		//WebElement min_slider=driver.findElement(By.className("price-slider-scroll"));
		WebElement min_slider=driver.findElement(By.xpath("//*[@id=\"content_wrapper\"]/div[7]/div[4]/div/div[1]/div[2]/div[2]/div[3]/div/div[1]/a[1]"));
		System.out.println("Current location:"+min_slider.getLocation());//(72, 450)
		act.dragAndDropBy(min_slider, 60,0).perform();
		System.out.println("After"+min_slider.getLocation());
		*/
//		Actions act=new Actions(driver);
//		WebElement sc1 = driver.findElement(By.xpath("//a[@class='price-slider-scroll left-handle ui-slider-handle ui-state-default ui-corner-all hashAdded']"));
//		act.clickAndHold(sc1).dragAndDropBy(sc1, 59, 0).build().perform();
//		
//		WebElement sc2 = driver.findElement(By.xpath("//a[@class='price-slider-scroll right-handle ui-slider-handle ui-state-default ui-corner-all hashAdded']"));
//		act.clickAndHold(sc2).dragAndDropBy(sc2, -10, 0).build().perform();
		
		
		//To get data from excel sheet
		String file=System.getProperty("user.dir")+"\\DataDrivenTesting\\GadgetExcel.xlsx";
		//To get row count
		//XSSFWorkbook Excelutils = new XSSFWorkbook(file);
		
	
		//To get row count
		int rows=Excelutils.getRowCount(file,"Sheet1");
		
		//To get data from row 1 and column 1 excel sheet
		String min =Excelutils.getCellData(file, "Sheet1", 0, 0);
		
		//To get data from row 1 and column 2 excel sheet
		String max=Excelutils.getCellData(file, "Sheet1", 0, 1);

		WebElement value=wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='price-text-box']/descendant::input[@name='fromVal']")));
		value.clear();
		value.sendKeys(min);
		WebElement val = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='price-text-box']/descendant::input[@name='toVal']")));
		val.clear();
		val.sendKeys(max);
 
		//Thread.sleep(4000);
		driver.findElement(By.xpath("//*[@id='content_wrapper']/div[7]/div[4]/div/div[1]/div[2]/div[2]/div[3]/div/div[5]")).click();
		//select elements
		
		Thread.sleep(2000);
		List<WebElement> web = driver.findElements(By.xpath("//p[@class='product-title']"));
		int k = 0;
		for(WebElement ele:web) {
			if(k >= 5) break;
	        String  final_data =	ele.getText();
	        System.out.println(final_data);
	        Excelutils.setCellData(file, "Sheet2", k, 0, final_data.split(" ")[0]);
			k++;
			
		}
		
		driver.quit();
 
	}
 
}




package project1;

	import java.io.File;
	import java.io.IOException;
	 
	import org.apache.commons.io.FileUtils;
	import org.openqa.selenium.OutputType;
	import org.openqa.selenium.TakesScreenshot;
	import org.openqa.selenium.WebDriver;
	import org.openqa.selenium.WebElement;
	 
	public class Screenshot {
	 
		//for fullScreen 
		public static void FullScreenshot(WebDriver driver, String name) throws IOException
		{
			TakesScreenshot ts = (TakesScreenshot) driver;
			File src = ts.getScreenshotAs(OutputType.FILE);
			File trg = new File ("C:\\Eclips\\Vinay\\project1\\Screenshot"+name+".png");
			FileUtils.copyFile(src, trg);
	        System.out.println("Screenshot is taken");
		}
		public static void ScreenshotElement(WebElement we) throws IOException
		{
			File src = we.getScreenshotAs(OutputType.FILE);
			File trg = new File ("C:\\Eclips\\Vinay\\project1\\Screenshot"+we.getText()+".png");
			FileUtils.copyFile(src, trg);
			System.out.println("Screenshot is taken");
		}
	 
	}



package project1;

import java.util.Scanner;
 
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
 
import com.github.dockerjava.api.model.Driver;
 
import io.github.bonigarcia.wdm.WebDriverManager;
 
public class DriverSetup {
 
	public static WebDriver WebDriverSetup()
	{
		System.out.println("--------------------------------------\n      Gadget Automation      \n--------------------------------------");
		System.out.println("Press the button to choose the browser you want to use:\n1.Chrome\n2.Edge\n3.Return");
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		if(n==1)
		{
			WebDriverManager.chromedriver().setup();
			WebDriver driver = new ChromeDriver();
			return driver;
		}
		else if(n==2)
		{
			WebDriverManager.edgedriver().setup();
			WebDriver driver = new EdgeDriver();
			return driver;
		}
		else
		{
			System.out.println("Wrong Input.");
			return null;
		}

 
	}
 
}

package project1;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Excelutils {

	public static FileInputStream fi;
	public static FileOutputStream fo;
	public static XSSFWorkbook wb;
	public static XSSFSheet ws;
	public static XSSFRow row;
	public static XSSFCell cell;
	public static CellStyle style;   
	
	public static int getRowCount(String xlfile,String xlsheet) throws IOException 
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		int rowcount=ws.getLastRowNum();
		wb.close();
		fi.close();
		return rowcount;		
	}
	

	public static int getCellCount(String xlfile,String xlsheet,int rownum) throws IOException
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		row=ws.getRow(rownum);
		int cellcount=row.getLastCellNum();
		wb.close();
		fi.close();
		return cellcount;
	}
	
	
	public static String getCellData(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		row=ws.getRow(rownum);
		cell=row.getCell(colnum);
	
		String data;
		try 
		{
			//data=cell.toString();
			
			DataFormatter formatter = new DataFormatter();
            data = formatter.formatCellValue(cell);
            return data;
		}
		catch (Exception e) 
		{
			data="";
		}
		
		wb.close();
		fi.close();
		return data;
	}
	
	

	public static void setCellData(String xlfile,String xlsheet,int rownum,int colnum,String data) throws IOException
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		row=ws.getRow(rownum);
		if(row == null) {
			row = ws.createRow(rownum);
		}
		cell=row.createCell(colnum);
		cell.setCellValue(data);
		fo=new FileOutputStream(xlfile);
		wb.write(fo);		
		wb.close();
		fi.close();
		fo.close();
				
	}
	
	public static void fillGreenColor(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		row=ws.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=wb.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND); 
				
		cell.setCellStyle(style);
		fo=new FileOutputStream(xlfile);
		wb.write(fo);
		wb.close();
		fi.close();
		fo.close();
	}
	
	
	public static void fillRedColor(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(xlfile);
		wb=new XSSFWorkbook(fi);
		ws=wb.getSheet(xlsheet);
		row=ws.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=wb.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.RED.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);  
		
		cell.setCellStyle(style);		
		fo=new FileOutputStream(xlfile);
		wb.write(fo);
		wb.close();
		fi.close();
		fo.close();
	}
	
}







